- // MIR for `preserve_locals` before PreventEarlyFinalization
+ // MIR for `preserve_locals` after PreventEarlyFinalization
  
  fn preserve_locals() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/prevent_early_finalization.rs:17:22: 17:22
      let _1: Finalizable;                 // in scope 0 at $DIR/prevent_early_finalization.rs:18:9: 18:11
      scope 1 {
          debug gc => _1;                  // in scope 1 at $DIR/prevent_early_finalization.rs:18:9: 18:11
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:18:9: 18:11
          _1 = Finalizable(const 123_usize); // scope 0 at $DIR/prevent_early_finalization.rs:18:14: 18:30
          FakeRead(ForLet, _1);            // scope 0 at $DIR/prevent_early_finalization.rs:18:9: 18:11
          _0 = const ();                   // scope 0 at $DIR/prevent_early_finalization.rs:17:22: 19:2
-         StorageDead(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:19:1: 19:2
+         nop;                             // scope 0 at $DIR/prevent_early_finalization.rs:19:1: 19:2
+         llvm_asm!(LlvmInlineAsmInner { asm: "", asm_str_style: Cooked, outputs: [], inputs: ["r"], clobbers: ["memory"], volatile: true, alignstack: false, dialect: Att } : [] : [($DIR/prevent_early_finalization.rs:1:1: 1:1 (#0), _1)]); // scope 0 at $DIR/prevent_early_finalization.rs:19:2: 19:2
+         StorageDead(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:19:2: 19:2
          return;                          // scope 0 at $DIR/prevent_early_finalization.rs:19:2: 19:2
+     }
+ 
+     bb1 (cleanup): {
+         resume;                          // scope 0 at $DIR/prevent_early_finalization.rs:17:1: 19:2
      }
  }
  
