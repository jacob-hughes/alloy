- // MIR for `preserve_args_inner` before PreventEarlyFinalization
+ // MIR for `preserve_args_inner` after PreventEarlyFinalization
  
  | User Type Annotations
  | 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(5:4632 ~ alloc[ed55]::gc::{impl#5}::new), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(5:4630 ~ alloc[ed55]::gc::{impl#5}), self_ty: std::gc::Gc<^1> }) }) } at $DIR/prevent_early_finalization.rs:30:5: 30:12
  |
  fn preserve_args_inner(_1: Gc<NeedsFinalize>, _2: Gc<NeedsFinalize>) -> Gc<NeedsFinalize> {
      debug x => _1;                       // in scope 0 at $DIR/prevent_early_finalization.rs:29:24: 29:25
      debug y => _2;                       // in scope 0 at $DIR/prevent_early_finalization.rs:29:46: 29:47
      let mut _0: std::gc::Gc<NeedsFinalize>; // return place in scope 0 at $DIR/prevent_early_finalization.rs:29:71: 29:88
      let mut _3: NeedsFinalize;           // in scope 0 at $DIR/prevent_early_finalization.rs:30:13: 30:37
      let mut _4: usize;                   // in scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:36
      let mut _5: usize;                   // in scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
      let mut _6: &NeedsFinalize;          // in scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
      let mut _7: &std::gc::Gc<NeedsFinalize>; // in scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:28
      let mut _8: usize;                   // in scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
      let mut _9: &NeedsFinalize;          // in scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
      let mut _10: &std::gc::Gc<NeedsFinalize>; // in scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:34
  
      bb0: {
          StorageLive(_3);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:13: 30:37
          StorageLive(_4);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:36
          StorageLive(_5);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
          StorageLive(_6);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
          StorageLive(_7);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:28
          _7 = &_1;                        // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:28
          _6 = <Gc<NeedsFinalize> as Deref>::deref(move _7) -> [return: bb1, unwind: bb5]; // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
                                           // mir::Constant
                                           // + span: $DIR/prevent_early_finalization.rs:30:27: 30:30
                                           // + literal: Const { ty: for<'r> fn(&'r std::gc::Gc<NeedsFinalize>) -> &'r <std::gc::Gc<NeedsFinalize> as std::ops::Deref>::Target {<std::gc::Gc<NeedsFinalize> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_7);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:28
          _5 = ((*_6).0: usize);           // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:30
          StorageLive(_8);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
          StorageLive(_9);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
          StorageLive(_10);                // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:34
          _10 = &_2;                       // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:34
          _9 = <Gc<NeedsFinalize> as Deref>::deref(move _10) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
                                           // mir::Constant
                                           // + span: $DIR/prevent_early_finalization.rs:30:33: 30:36
                                           // + literal: Const { ty: for<'r> fn(&'r std::gc::Gc<NeedsFinalize>) -> &'r <std::gc::Gc<NeedsFinalize> as std::ops::Deref>::Target {<std::gc::Gc<NeedsFinalize> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
          StorageDead(_10);                // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:34
          _8 = ((*_9).0: usize);           // scope 0 at $DIR/prevent_early_finalization.rs:30:33: 30:36
          _4 = Add(move _5, move _8);      // scope 0 at $DIR/prevent_early_finalization.rs:30:27: 30:36
          StorageDead(_8);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:35: 30:36
          StorageDead(_5);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:35: 30:36
          _3 = NeedsFinalize(move _4);     // scope 0 at $DIR/prevent_early_finalization.rs:30:13: 30:37
          StorageDead(_4);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:36: 30:37
          _0 = Gc::<NeedsFinalize>::new(move _3) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/prevent_early_finalization.rs:30:5: 30:38
                                           // mir::Constant
                                           // + span: $DIR/prevent_early_finalization.rs:30:5: 30:12
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: fn(NeedsFinalize) -> std::gc::Gc<NeedsFinalize> {std::gc::Gc::<NeedsFinalize>::new}, val: Value(Scalar(<ZST>)) }
      }
  
      bb3: {
          StorageDead(_3);                 // scope 0 at $DIR/prevent_early_finalization.rs:30:37: 30:38
          StorageDead(_9);                 // scope 0 at $DIR/prevent_early_finalization.rs:31:1: 31:2
          StorageDead(_6);                 // scope 0 at $DIR/prevent_early_finalization.rs:31:1: 31:2
+         llvm_asm!(LlvmInlineAsmInner { asm: "", asm_str_style: Cooked, outputs: [], inputs: ["r"], clobbers: ["memory"], volatile: true, alignstack: false, dialect: Att } : [] : [(no-location (#0), _1)]); // scope 0 at $DIR/prevent_early_finalization.rs:31:2: 31:2
+         StorageDead(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:31:2: 31:2
+         llvm_asm!(LlvmInlineAsmInner { asm: "", asm_str_style: Cooked, outputs: [], inputs: ["r"], clobbers: ["memory"], volatile: true, alignstack: false, dialect: Att } : [] : [(no-location (#0), _2)]); // scope 0 at $DIR/prevent_early_finalization.rs:31:2: 31:2
+         StorageDead(_2);                 // scope 0 at $DIR/prevent_early_finalization.rs:31:2: 31:2
          return;                          // scope 0 at $DIR/prevent_early_finalization.rs:31:2: 31:2
      }
  
      bb4 (cleanup): {
          drop(_3) -> bb5;                 // scope 0 at $DIR/prevent_early_finalization.rs:30:37: 30:38
      }
  
      bb5 (cleanup): {
          resume;                          // scope 0 at $DIR/prevent_early_finalization.rs:29:1: 31:2
      }
  }
  
