- // MIR for `preserve_multiple_locals` before PreventEarlyFinalization
+ // MIR for `preserve_multiple_locals` after PreventEarlyFinalization
  
  | User Type Annotations
  | 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(5:4632 ~ alloc[ed55]::gc::{impl#5}::new), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(5:4630 ~ alloc[ed55]::gc::{impl#5}), self_ty: std::gc::Gc<^1> }) }) } at $DIR/prevent_early_finalization.rs:19:15: 19:22
  | 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(5:4632 ~ alloc[ed55]::gc::{impl#5}::new), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(5:4630 ~ alloc[ed55]::gc::{impl#5}), self_ty: std::gc::Gc<^1> }) }) } at $DIR/prevent_early_finalization.rs:20:15: 20:22
  |
  fn preserve_multiple_locals() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/prevent_early_finalization.rs:18:31: 18:31
      let _1: std::gc::Gc<NeedsFinalize>;  // in scope 0 at $DIR/prevent_early_finalization.rs:19:9: 19:12
      let mut _2: NeedsFinalize;           // in scope 0 at $DIR/prevent_early_finalization.rs:19:23: 19:41
      let mut _4: NeedsFinalize;           // in scope 0 at $DIR/prevent_early_finalization.rs:20:23: 20:41
      scope 1 {
          debug gc1 => _1;                 // in scope 1 at $DIR/prevent_early_finalization.rs:19:9: 19:12
          let _3: std::gc::Gc<NeedsFinalize>; // in scope 1 at $DIR/prevent_early_finalization.rs:20:9: 20:12
          scope 2 {
              debug gc2 => _3;             // in scope 2 at $DIR/prevent_early_finalization.rs:20:9: 20:12
          }
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:19:9: 19:12
          StorageLive(_2);                 // scope 0 at $DIR/prevent_early_finalization.rs:19:23: 19:41
          _2 = NeedsFinalize(const 123_usize); // scope 0 at $DIR/prevent_early_finalization.rs:19:23: 19:41
          _1 = Gc::<NeedsFinalize>::new(move _2) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/prevent_early_finalization.rs:19:15: 19:42
                                           // mir::Constant
                                           // + span: $DIR/prevent_early_finalization.rs:19:15: 19:22
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: fn(NeedsFinalize) -> std::gc::Gc<NeedsFinalize> {std::gc::Gc::<NeedsFinalize>::new}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/prevent_early_finalization.rs:19:41: 19:42
          FakeRead(ForLet(None), _1);      // scope 0 at $DIR/prevent_early_finalization.rs:19:9: 19:12
          StorageLive(_3);                 // scope 1 at $DIR/prevent_early_finalization.rs:20:9: 20:12
          StorageLive(_4);                 // scope 1 at $DIR/prevent_early_finalization.rs:20:23: 20:41
          _4 = NeedsFinalize(const 123_usize); // scope 1 at $DIR/prevent_early_finalization.rs:20:23: 20:41
          _3 = Gc::<NeedsFinalize>::new(move _4) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/prevent_early_finalization.rs:20:15: 20:42
                                           // mir::Constant
                                           // + span: $DIR/prevent_early_finalization.rs:20:15: 20:22
                                           // + user_ty: UserType(1)
                                           // + literal: Const { ty: fn(NeedsFinalize) -> std::gc::Gc<NeedsFinalize> {std::gc::Gc::<NeedsFinalize>::new}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
          StorageDead(_4);                 // scope 1 at $DIR/prevent_early_finalization.rs:20:41: 20:42
          FakeRead(ForLet(None), _3);      // scope 1 at $DIR/prevent_early_finalization.rs:20:9: 20:12
          _0 = const ();                   // scope 0 at $DIR/prevent_early_finalization.rs:18:31: 21:2
-         StorageDead(_3);                 // scope 1 at $DIR/prevent_early_finalization.rs:21:1: 21:2
-         StorageDead(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:21:1: 21:2
+         nop;                             // scope 1 at $DIR/prevent_early_finalization.rs:21:1: 21:2
+         nop;                             // scope 0 at $DIR/prevent_early_finalization.rs:21:1: 21:2
+         llvm_asm!(LlvmInlineAsmInner { asm: "", asm_str_style: Cooked, outputs: [], inputs: ["r"], clobbers: ["memory"], volatile: true, alignstack: false, dialect: Att } : [] : [(no-location (#0), _1)]); // scope 0 at $DIR/prevent_early_finalization.rs:21:2: 21:2
+         StorageDead(_1);                 // scope 0 at $DIR/prevent_early_finalization.rs:21:2: 21:2
+         llvm_asm!(LlvmInlineAsmInner { asm: "", asm_str_style: Cooked, outputs: [], inputs: ["r"], clobbers: ["memory"], volatile: true, alignstack: false, dialect: Att } : [] : [(no-location (#0), _3)]); // scope 0 at $DIR/prevent_early_finalization.rs:21:2: 21:2
+         StorageDead(_3);                 // scope 0 at $DIR/prevent_early_finalization.rs:21:2: 21:2
          return;                          // scope 0 at $DIR/prevent_early_finalization.rs:21:2: 21:2
      }
  
      bb3 (cleanup): {
          drop(_4) -> bb5;                 // scope 1 at $DIR/prevent_early_finalization.rs:20:41: 20:42
      }
  
      bb4 (cleanup): {
          drop(_2) -> bb5;                 // scope 0 at $DIR/prevent_early_finalization.rs:19:41: 19:42
      }
  
      bb5 (cleanup): {
          resume;                          // scope 0 at $DIR/prevent_early_finalization.rs:18:1: 21:2
      }
  }
  
